[1 of 1] Compiling BloomFilter.Hash ( src/BloomFilter/Hash.hs, src/BloomFilter/Hash.o )

ORIGINAL CODE OF doubleHash:

doubleHash2 :: Hashable a => Int -> a -> [Word32]
doubleHash2 numHashes value =
  go 0
  where
    go i
      | i == num =
          []
      | otherwise =
          h1 + h2 * i : go (i + 1)

    h =
      hashSalt 0x9150a946c4a8966e value

    !h1 =
      fromIntegral (h `shiftR` 32) .&. maxBound

    !h2 =
      fromIntegral h

    num =
      fromIntegral numHashes

==================== Tidy Core ====================
Result size of Tidy Core = {terms: 849, types: 967, coercions: 97}

-- RHS size: {terms: 3, types: 4, coercions: 2}
hashSalt [InlPrag=INLINE]
  :: forall a_a2Cn[sk].
     Hashable a_a2Cn[sk] =>
     Salt -> a_a2Cn[sk] -> Word64
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a2Cn[sk])
                 (tpl_B1 [Occ=Once] :: Hashable a_a2Cn[sk]) ->
                 tpl_B1
                 `cast` (BloomFilter.Hash.N:Hashable[0] <a_a2Cn[sk]>_N
                         :: (Hashable a_a2Cn[sk] :: Constraint)
                            ~R#
                            ((Salt -> a_a2Cn[sk] -> Word64) :: *))}]
hashSalt =
  \ (@ a_a2Cn[sk]) (tpl_B1 :: Hashable a_a2Cn[sk]) ->
    tpl_B1
    `cast` (BloomFilter.Hash.N:Hashable[0] <a_a2Cn[sk]>_N
            :: (Hashable a_a2Cn[sk] :: Constraint)
               ~R#
               ((Salt -> a_a2Cn[sk] -> Word64) :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0}
BloomFilter.Hash.hash1 :: Word64
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
BloomFilter.Hash.hash1 = GHC.Word.W64# 503340467227682003##

-- RHS size: {terms: 4, types: 4, coercions: 2}
hash :: forall a_a2S6. Hashable a_a2S6 => a_a2S6 -> Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a4Et)
                 ($dHashable_a5kW [Occ=Once] :: Hashable a_a4Et) ->
                 ($dHashable_a5kW
                  `cast` (BloomFilter.Hash.N:Hashable[0] <a_a4Et>_N
                          :: (Hashable a_a4Et :: Constraint)
                             ~R#
                             ((Salt -> a_a4Et -> Word64) :: *)))
                   BloomFilter.Hash.hash1}]
hash =
  \ (@ a_a4Et) ($dHashable_a5kW :: Hashable a_a4Et) ->
    ($dHashable_a5kW
     `cast` (BloomFilter.Hash.N:Hashable[0] <a_a4Et>_N
             :: (Hashable a_a4Et :: Constraint)
                ~R#
                ((Salt -> a_a4Et -> Word64) :: *)))
      BloomFilter.Hash.hash1

-- RHS size: {terms: 18, types: 24, coercions: 6}
BloomFilter.Hash.$fHashable(,,)_$chashSalt
  :: forall a_a5tO b_a5tP c_a5tQ.
     (Hashable a_a5tO, Hashable b_a5tP, Hashable c_a5tQ) =>
     Salt -> (a_a5tO, b_a5tP, c_a5tQ) -> Word64
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=DmdType <L,1*C1(C1(U))><L,1*C1(C1(U))><C(C(S)),1*C1(C1(U(U)))><L,U><S,1*U(U,U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5tO)
                 (@ b_a5tP)
                 (@ c_a5tQ)
                 ($dHashable_a5tR [Occ=Once] :: Hashable a_a5tO)
                 ($dHashable1_a5tS [Occ=Once] :: Hashable b_a5tP)
                 ($dHashable2_a5tT [Occ=Once] :: Hashable c_a5tQ)
                 (salt_a4uv [Occ=Once] :: Salt)
                 (ds_d5wE [Occ=Once!] :: (a_a5tO, b_a5tP, c_a5tQ)) ->
                 case ds_d5wE
                 of _ [Occ=Dead]
                 { (a1_a4uw [Occ=Once], b1_a4ux [Occ=Once], c1_a4uy [Occ=Once]) ->
                 ($dHashable2_a5tT
                  `cast` (BloomFilter.Hash.N:Hashable[0] <c_a5tQ>_N
                          :: (Hashable c_a5tQ :: Constraint)
                             ~R#
                             ((Salt -> c_a5tQ -> Word64) :: *)))
                   (($dHashable1_a5tS
                     `cast` (BloomFilter.Hash.N:Hashable[0] <b_a5tP>_N
                             :: (Hashable b_a5tP :: Constraint)
                                ~R#
                                ((Salt -> b_a5tP -> Word64) :: *)))
                      (($dHashable_a5tR
                        `cast` (BloomFilter.Hash.N:Hashable[0] <a_a5tO>_N
                                :: (Hashable a_a5tO :: Constraint)
                                   ~R#
                                   ((Salt -> a_a5tO -> Word64) :: *)))
                         salt_a4uv a1_a4uw)
                      b1_a4ux)
                   c1_a4uy
                 }}]
BloomFilter.Hash.$fHashable(,,)_$chashSalt =
  \ (@ a_a5tO)
    (@ b_a5tP)
    (@ c_a5tQ)
    ($dHashable_a5tR :: Hashable a_a5tO)
    ($dHashable1_a5tS :: Hashable b_a5tP)
    ($dHashable2_a5tT :: Hashable c_a5tQ)
    (salt_a4uv :: Salt)
    (ds_d5wE :: (a_a5tO, b_a5tP, c_a5tQ)) ->
    case ds_d5wE of _ [Occ=Dead] { (a1_a4uw, b1_a4ux, c1_a4uy) ->
    ($dHashable2_a5tT
     `cast` (BloomFilter.Hash.N:Hashable[0] <c_a5tQ>_N
             :: (Hashable c_a5tQ :: Constraint)
                ~R#
                ((Salt -> c_a5tQ -> Word64) :: *)))
      (($dHashable1_a5tS
        `cast` (BloomFilter.Hash.N:Hashable[0] <b_a5tP>_N
                :: (Hashable b_a5tP :: Constraint)
                   ~R#
                   ((Salt -> b_a5tP -> Word64) :: *)))
         (($dHashable_a5tR
           `cast` (BloomFilter.Hash.N:Hashable[0] <a_a5tO>_N
                   :: (Hashable a_a5tO :: Constraint)
                      ~R#
                      ((Salt -> a_a5tO -> Word64) :: *)))
            salt_a4uv a1_a4uw)
         b1_a4ux)
      c1_a4uy
    }

-- RHS size: {terms: 1, types: 0, coercions: 24}
BloomFilter.Hash.$fHashable(,,) [InlPrag=INLINE (sat-args=0)]
  :: forall a_a4BA b_a4BB c_a4BC.
     (Hashable a_a4BA, Hashable b_a4BB, Hashable c_a4BC) =>
     Hashable (a_a4BA, b_a4BB, c_a4BC)
[GblId[DFunId(nt)],
 Arity=5,
 Caf=NoCafRefs,
 Str=DmdType <L,1*C1(C1(U))><L,1*C1(C1(U))><C(C(S)),1*C1(C1(U(U)))><L,U><S,1*U(U,U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=False,boring_ok=True)
         Tmpl= BloomFilter.Hash.$fHashable(,,)_$chashSalt
               `cast` (forall (a_a5tO :: <*>_N).
                       forall (b_a5tP :: <*>_N).
                       forall (c_a5tQ :: <*>_N).
                       <Hashable a_a5tO>_R
                       -> <Hashable b_a5tP>_R
                       -> <Hashable c_a5tQ>_R
                       -> Sym
                            (BloomFilter.Hash.N:Hashable[0] <(a_a5tO, b_a5tP, c_a5tQ)>_N)
                       :: ((forall a_a5tO b_a5tP c_a5tQ.
                            (Hashable a_a5tO, Hashable b_a5tP, Hashable c_a5tQ) =>
                            Salt -> (a_a5tO, b_a5tP, c_a5tQ) -> Word64) :: *)
                          ~R#
                          ((forall a_a5tO b_a5tP c_a5tQ.
                            (Hashable a_a5tO, Hashable b_a5tP, Hashable c_a5tQ) =>
                            Hashable (a_a5tO, b_a5tP, c_a5tQ)) :: *))}]
BloomFilter.Hash.$fHashable(,,) =
  BloomFilter.Hash.$fHashable(,,)_$chashSalt
  `cast` (forall (a_a5tO :: <*>_N).
          forall (b_a5tP :: <*>_N).
          forall (c_a5tQ :: <*>_N).
          <Hashable a_a5tO>_R
          -> <Hashable b_a5tP>_R
          -> <Hashable c_a5tQ>_R
          -> Sym
               (BloomFilter.Hash.N:Hashable[0] <(a_a5tO, b_a5tP, c_a5tQ)>_N)
          :: ((forall a_a5tO b_a5tP c_a5tQ.
               (Hashable a_a5tO, Hashable b_a5tP, Hashable c_a5tQ) =>
               Salt -> (a_a5tO, b_a5tP, c_a5tQ) -> Word64) :: *)
             ~R#
             ((forall a_a5tO b_a5tP c_a5tQ.
               (Hashable a_a5tO, Hashable b_a5tP, Hashable c_a5tQ) =>
               Hashable (a_a5tO, b_a5tP, c_a5tQ)) :: *))

-- RHS size: {terms: 14, types: 17, coercions: 4}
BloomFilter.Hash.$fHashable(,)_$chashSalt
  :: forall a_a5ue b_a5uf.
     (Hashable a_a5ue, Hashable b_a5uf) =>
     Salt -> (a_a5ue, b_a5uf) -> Word64
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=DmdType <L,1*C1(C1(U))><C(C(S)),1*C1(C1(U(U)))><L,U><S,1*U(U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a5ue)
                 (@ b_a5uf)
                 ($dHashable_a5ug [Occ=Once] :: Hashable a_a5ue)
                 ($dHashable1_a5uh [Occ=Once] :: Hashable b_a5uf)
                 (salt_a4uB [Occ=Once] :: Salt)
                 (ds_d5wK [Occ=Once!] :: (a_a5ue, b_a5uf)) ->
                 case ds_d5wK
                 of _ [Occ=Dead] { (a1_a4uC [Occ=Once], b1_a4uD [Occ=Once]) ->
                 ($dHashable1_a5uh
                  `cast` (BloomFilter.Hash.N:Hashable[0] <b_a5uf>_N
                          :: (Hashable b_a5uf :: Constraint)
                             ~R#
                             ((Salt -> b_a5uf -> Word64) :: *)))
                   (($dHashable_a5ug
                     `cast` (BloomFilter.Hash.N:Hashable[0] <a_a5ue>_N
                             :: (Hashable a_a5ue :: Constraint)
                                ~R#
                                ((Salt -> a_a5ue -> Word64) :: *)))
                      salt_a4uB a1_a4uC)
                   b1_a4uD
                 }}]
BloomFilter.Hash.$fHashable(,)_$chashSalt =
  \ (@ a_a5ue)
    (@ b_a5uf)
    ($dHashable_a5ug :: Hashable a_a5ue)
    ($dHashable1_a5uh :: Hashable b_a5uf)
    (salt_a4uB :: Salt)
    (ds_d5wK :: (a_a5ue, b_a5uf)) ->
    case ds_d5wK of _ [Occ=Dead] { (a1_a4uC, b1_a4uD) ->
    ($dHashable1_a5uh
     `cast` (BloomFilter.Hash.N:Hashable[0] <b_a5uf>_N
             :: (Hashable b_a5uf :: Constraint)
                ~R#
                ((Salt -> b_a5uf -> Word64) :: *)))
      (($dHashable_a5ug
        `cast` (BloomFilter.Hash.N:Hashable[0] <a_a5ue>_N
                :: (Hashable a_a5ue :: Constraint)
                   ~R#
                   ((Salt -> a_a5ue -> Word64) :: *)))
         salt_a4uB a1_a4uC)
      b1_a4uD
    }

-- RHS size: {terms: 1, types: 0, coercions: 17}
BloomFilter.Hash.$fHashable(,) [InlPrag=INLINE (sat-args=0)]
  :: forall a_a4BF b_a4BG.
     (Hashable a_a4BF, Hashable b_a4BG) =>
     Hashable (a_a4BF, b_a4BG)
[GblId[DFunId(nt)],
 Arity=4,
 Caf=NoCafRefs,
 Str=DmdType <L,1*C1(C1(U))><C(C(S)),1*C1(C1(U(U)))><L,U><S,1*U(U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= BloomFilter.Hash.$fHashable(,)_$chashSalt
               `cast` (forall (a_a5ue :: <*>_N).
                       forall (b_a5uf :: <*>_N).
                       <Hashable a_a5ue>_R
                       -> <Hashable b_a5uf>_R
                       -> Sym (BloomFilter.Hash.N:Hashable[0] <(a_a5ue, b_a5uf)>_N)
                       :: ((forall a_a5ue b_a5uf.
                            (Hashable a_a5ue, Hashable b_a5uf) =>
                            Salt -> (a_a5ue, b_a5uf) -> Word64) :: *)
                          ~R#
                          ((forall a_a5ue b_a5uf.
                            (Hashable a_a5ue, Hashable b_a5uf) =>
                            Hashable (a_a5ue, b_a5uf)) :: *))}]
BloomFilter.Hash.$fHashable(,) =
  BloomFilter.Hash.$fHashable(,)_$chashSalt
  `cast` (forall (a_a5ue :: <*>_N).
          forall (b_a5uf :: <*>_N).
          <Hashable a_a5ue>_R
          -> <Hashable b_a5uf>_R
          -> Sym (BloomFilter.Hash.N:Hashable[0] <(a_a5ue, b_a5uf)>_N)
          :: ((forall a_a5ue b_a5uf.
               (Hashable a_a5ue, Hashable b_a5uf) =>
               Salt -> (a_a5ue, b_a5uf) -> Word64) :: *)
             ~R#
             ((forall a_a5ue b_a5uf.
               (Hashable a_a5ue, Hashable b_a5uf) =>
               Hashable (a_a5ue, b_a5uf)) :: *))

Rec {
-- RHS size: {terms: 27, types: 31, coercions: 0}
rechunk [Occ=LoopBreaker] :: Lazy.ByteString -> [Strict.ByteString]
[GblId, Arity=1, Str=DmdType <S,1*U>]
rechunk =
  \ (s_a4mD :: Lazy.ByteString) ->
    case s_a4mD of wild_a5Bo {
      Data.ByteString.Lazy.Internal.Empty ->
        GHC.Types.[] @ Strict.ByteString;
      Data.ByteString.Lazy.Internal.Chunk ipv_a5Nr ipv1_a5Ns ipv2_a5Nt
                                          ipv3_a5Nu ipv4_a5Nv ->
        let {
          ds_s5MR [Dmd=<L,U(U,U)>] :: (Lazy.ByteString, Lazy.ByteString)
          [LclId, Str=DmdType]
          ds_s5MR =
            case Data.ByteString.Lazy.$wsplitAt' 65536# wild_a5Bo
            of _ [Occ=Dead] { (# ww3_a5NG, ww4_a5NH #) ->
            (ww3_a5NG, ww4_a5NH)
            } } in
        GHC.Types.:
          @ Strict.ByteString
          (case ds_s5MR of _ [Occ=Dead] { (pre_X59G, suf_a58X) ->
           Data.ByteString.Internal.$fMonoidByteString_$cmconcat
             (Data.ByteString.Lazy.toChunks_go1 pre_X59G)
           })
          (case ds_s5MR of _ [Occ=Dead] { (pre_X599, suf_X59K) ->
           rechunk suf_X59K
           })
    }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0}
doubleHash1 :: Word64
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
doubleHash1 = GHC.Word.W64# 10471055255048590958##

-- RHS size: {terms: 49, types: 19, coercions: 2}
BloomFilter.Hash.$wdoubleHash [InlPrag=[0]]
  :: forall a_s6b2.
     Hashable a_s6b2 =>
     GHC.Prim.Int# -> a_s6b2 -> [Word32]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=DmdType <C(C(S)),1*C1(C1(U(U)))><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0] 153 0}]
BloomFilter.Hash.$wdoubleHash =
  \ (@ a_s6b2)
    (w_s6b3 :: Hashable a_s6b2)
    (ww_s6b8 :: GHC.Prim.Int#)
    (w1_s6b5 :: a_s6b2) ->
    case (w_s6b3
          `cast` (BloomFilter.Hash.N:Hashable[0] <a_s6b2>_N
                  :: (Hashable a_s6b2 :: Constraint)
                     ~R#
                     ((Salt -> a_s6b2 -> Word64) :: *)))
           doubleHash1 w1_s6b5
    of _ [Occ=Dead] { GHC.Word.W64# x#_a5EK ->
    let {
      num_s6cd :: GHC.Prim.Word#
      [LclId, Str=DmdType]
      num_s6cd = GHC.Prim.narrow32Word# (GHC.Prim.int2Word# ww_s6b8) } in
    let {
      ipv_s5Fu :: GHC.Prim.Word#
      [LclId, Str=DmdType]
      ipv_s5Fu =
        GHC.Prim.and#
          (GHC.Prim.narrow32Word# (GHC.Prim.uncheckedShiftRL# x#_a5EK 32#))
          4294967295## } in
    let {
      ipv1_s5Fz :: GHC.Prim.Word#
      [LclId, Str=DmdType]
      ipv1_s5Fz = GHC.Prim.narrow32Word# x#_a5EK } in
    letrec {
      $wgo_s6b1 [InlPrag=[0], Occ=LoopBreaker]
        :: GHC.Prim.Word# -> [Word32]
      [LclId, Arity=1, Str=DmdType <S,U>]
      $wgo_s6b1 =
        \ (ww1_s6aZ :: GHC.Prim.Word#) ->
          case GHC.Prim.tagToEnum#
                 @ Bool (GHC.Prim.eqWord# ww1_s6aZ num_s6cd)
          of _ [Occ=Dead] {
            False ->
              GHC.Types.:
                @ Word32
                (GHC.Word.W32#
                   (GHC.Prim.narrow32Word#
                      (GHC.Prim.plusWord#
                         ipv_s5Fu
                         (GHC.Prim.narrow32Word#
                            (GHC.Prim.timesWord# ipv1_s5Fz ww1_s6aZ)))))
                ($wgo_s6b1
                   (GHC.Prim.narrow32Word# (GHC.Prim.plusWord# ww1_s6aZ 1##)));
            True -> GHC.Types.[] @ Word32
          }; } in
    $wgo_s6b1 0##
    }

-- RHS size: {terms: 11, types: 9, coercions: 0}
doubleHash [InlPrag=INLINE[0]]
  :: forall a_a2Jx. Hashable a_a2Jx => Int -> a_a2Jx -> [Word32]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=DmdType <C(C(S)),1*C1(C1(U(U)))><S(S),1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s6b2)
                 (w_s6b3 [Occ=Once] :: Hashable a_s6b2)
                 (w1_s6b4 [Occ=Once!] :: Int)
                 (w2_s6b5 [Occ=Once] :: a_s6b2) ->
                 case w1_s6b4 of _ [Occ=Dead] { GHC.Types.I# ww1_s6b8 [Occ=Once] ->
                 BloomFilter.Hash.$wdoubleHash @ a_s6b2 w_s6b3 ww1_s6b8 w2_s6b5
                 }}]
doubleHash =
  \ (@ a_s6b2)
    (w_s6b3 :: Hashable a_s6b2)
    (w1_s6b4 :: Int)
    (w2_s6b5 :: a_s6b2) ->
    case w1_s6b4 of _ [Occ=Dead] { GHC.Types.I# ww1_s6b8 ->
    BloomFilter.Hash.$wdoubleHash @ a_s6b2 w_s6b3 ww1_s6b8 w2_s6b5
    }

-- RHS size: {terms: 2, types: 0, coercions: 0}
BloomFilter.Hash.$trModule2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
BloomFilter.Hash.$trModule2 = GHC.Types.TrNameS "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0}
BloomFilter.Hash.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
BloomFilter.Hash.$trModule1 = GHC.Types.TrNameS "BloomFilter.Hash"#

-- RHS size: {terms: 3, types: 0, coercions: 0}
BloomFilter.Hash.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
BloomFilter.Hash.$trModule =
  GHC.Types.Module
    BloomFilter.Hash.$trModule2 BloomFilter.Hash.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0}
BloomFilter.Hash.$tc'C:Hashable1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 20}]
BloomFilter.Hash.$tc'C:Hashable1 = GHC.Types.TrNameS "'C:Hashable"#

-- RHS size: {terms: 5, types: 0, coercions: 0}
BloomFilter.Hash.$tc'C:Hashable :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
BloomFilter.Hash.$tc'C:Hashable =
  GHC.Types.TyCon
    15350366277146155190##
    11892326176059284023##
    BloomFilter.Hash.$trModule
    BloomFilter.Hash.$tc'C:Hashable1

-- RHS size: {terms: 2, types: 0, coercions: 0}
BloomFilter.Hash.$tcHashable1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 20}]
BloomFilter.Hash.$tcHashable1 = GHC.Types.TrNameS "Hashable"#

-- RHS size: {terms: 5, types: 0, coercions: 0}
BloomFilter.Hash.$tcHashable :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
BloomFilter.Hash.$tcHashable =
  GHC.Types.TyCon
    14368337847621322247##
    3169995627451274767##
    BloomFilter.Hash.$trModule
    BloomFilter.Hash.$tcHashable1

-- RHS size: {terms: 83, types: 98, coercions: 0}
BloomFilter.Hash.$w$shashStorable1 [InlPrag=[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Double# -> Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 138 0}]
BloomFilter.Hash.$w$shashStorable1 =
  \ (ww_s6bf :: GHC.Prim.Word#) (ww1_s6bj :: GHC.Prim.Double#) ->
    case GHC.Magic.runRW#
           @ 'GHC.Types.PtrRepLifted
           @ Word64
           (\ (s_a5C8 [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
              case GHC.Prim.noDuplicate# s_a5C8
              of s'_a5C9 [OS=OneShot] { __DEFAULT ->
              case GHC.Prim.newAlignedPinnedByteArray#
                     @ GHC.Prim.RealWorld 8# 8# s'_a5C9
              of _ [Occ=Dead] { (# ipv_a5Sd, ipv1_a5Se #) ->
              case GHC.Prim.unsafeFreezeByteArray#
                     @ GHC.Prim.RealWorld ipv1_a5Se ipv_a5Sd
              of _ [Occ=Dead] { (# ipv2_a5Sj, ipv3_a5Sk #) ->
              let {
                ptr_a5Si [Dmd=<S,U>] :: GHC.Prim.Addr#
                [LclId, Str=DmdType]
                ptr_a5Si = GHC.Prim.byteArrayContents# ipv3_a5Sk } in
              case GHC.Prim.writeDoubleOffAddr#
                     @ GHC.Prim.RealWorld ptr_a5Si 0# ww1_s6bj ipv2_a5Sj
              of s2_a5Tk [OS=OneShot] { __DEFAULT ->
              case GHC.Prim.newAlignedPinnedByteArray#
                     @ GHC.Prim.RealWorld 8# 8# s2_a5Tk
              of _ [Occ=Dead] { (# ipv4_X5TB, ipv5_X5TD #) ->
              case GHC.Prim.unsafeFreezeByteArray#
                     @ GHC.Prim.RealWorld ipv5_X5TD ipv4_X5TB
              of _ [Occ=Dead] { (# ipv6_X5TL, ipv7_X5TN #) ->
              let {
                ptr1_X5Vi [Dmd=<S,U>] :: GHC.Prim.Addr#
                [LclId, Str=DmdType]
                ptr1_X5Vi = GHC.Prim.byteArrayContents# ipv7_X5TN } in
              case GHC.Prim.writeWord64OffAddr#
                     @ GHC.Prim.RealWorld ptr1_X5Vi 0# ww_s6bf ipv6_X5TL
              of s1_a5SO [OS=OneShot] { __DEFAULT ->
              case {__pkg_ccall main hashword2 Addr#
                            -> Word#
                            -> Addr#
                            -> Addr#
                            -> State# RealWorld
                            -> (# State# RealWorld #)}_d5xn
                     ptr_a5Si 2## ptr1_X5Vi (GHC.Prim.plusAddr# ptr1_X5Vi 4#) s1_a5SO
              of _ [Occ=Dead] { (# ds_d5xl [OS=OneShot] #) ->
              case GHC.Prim.readWord64OffAddr#
                     @ GHC.Prim.RealWorld ptr1_X5Vi 0# ds_d5xl
              of _ [Occ=Dead] { (# ipv8_a5Ry, ipv9_a5Rz #) ->
              case GHC.Prim.touch#
                     @ 'GHC.Types.PtrRepUnlifted
                     @ GHC.Prim.ByteArray#
                     ipv7_X5TN
                     ipv8_a5Ry
              of s4_a5Sx [OS=OneShot] { __DEFAULT ->
              case GHC.Prim.touch#
                     @ 'GHC.Types.PtrRepUnlifted @ GHC.Prim.ByteArray# ipv3_a5Sk s4_a5Sx
              of s3_X5Ur [OS=OneShot] { __DEFAULT ->
              (# s3_X5Ur, GHC.Word.W64# ipv9_a5Rz #)
              }
              }
              }
              }
              }
              }
              }
              }
              }
              }
              })
    of _ [Occ=Dead] { (# ipv_a5Cc, ipv1_a5Cd #) ->
    ipv1_a5Cd
    }

-- RHS size: {terms: 11, types: 6, coercions: 0}
BloomFilter.Hash.$fHashableDouble_$shashStorable [InlPrag=INLINE[0]]
  :: Word64 -> Double -> Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s6bb [Occ=Once!] :: Word64)
                 (w1_s6bc [Occ=Once!] :: Double) ->
                 case w_s6bb of _ [Occ=Dead] { GHC.Word.W64# ww1_s6bf [Occ=Once] ->
                 case w1_s6bc of _ [Occ=Dead] { GHC.Types.D# ww3_s6bj [Occ=Once] ->
                 BloomFilter.Hash.$w$shashStorable1 ww1_s6bf ww3_s6bj
                 }
                 }}]
BloomFilter.Hash.$fHashableDouble_$shashStorable =
  \ (w_s6bb :: Word64) (w1_s6bc :: Double) ->
    case w_s6bb of _ [Occ=Dead] { GHC.Word.W64# ww1_s6bf ->
    case w1_s6bc of _ [Occ=Dead] { GHC.Types.D# ww3_s6bj ->
    BloomFilter.Hash.$w$shashStorable1 ww1_s6bf ww3_s6bj
    }
    }

-- RHS size: {terms: 83, types: 98, coercions: 0}
BloomFilter.Hash.$w$shashStorable [InlPrag=[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Char# -> Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 138 0}]
BloomFilter.Hash.$w$shashStorable =
  \ (ww_s6bq :: GHC.Prim.Word#) (ww1_s6bu :: GHC.Prim.Char#) ->
    case GHC.Magic.runRW#
           @ 'GHC.Types.PtrRepLifted
           @ Word64
           (\ (s_a5C8 [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
              case GHC.Prim.noDuplicate# s_a5C8
              of s'_a5C9 [OS=OneShot] { __DEFAULT ->
              case GHC.Prim.newAlignedPinnedByteArray#
                     @ GHC.Prim.RealWorld 4# 4# s'_a5C9
              of _ [Occ=Dead] { (# ipv_a5Sd, ipv1_a5Se #) ->
              case GHC.Prim.unsafeFreezeByteArray#
                     @ GHC.Prim.RealWorld ipv1_a5Se ipv_a5Sd
              of _ [Occ=Dead] { (# ipv2_a5Sj, ipv3_a5Sk #) ->
              let {
                ptr_a5Si [Dmd=<S,U>] :: GHC.Prim.Addr#
                [LclId, Str=DmdType]
                ptr_a5Si = GHC.Prim.byteArrayContents# ipv3_a5Sk } in
              case GHC.Prim.writeWideCharOffAddr#
                     @ GHC.Prim.RealWorld ptr_a5Si 0# ww1_s6bu ipv2_a5Sj
              of s2_a5TH [OS=OneShot] { __DEFAULT ->
              case GHC.Prim.newAlignedPinnedByteArray#
                     @ GHC.Prim.RealWorld 8# 8# s2_a5TH
              of _ [Occ=Dead] { (# ipv4_X5TC, ipv5_X5TE #) ->
              case GHC.Prim.unsafeFreezeByteArray#
                     @ GHC.Prim.RealWorld ipv5_X5TE ipv4_X5TC
              of _ [Occ=Dead] { (# ipv6_X5TM, ipv7_X5TO #) ->
              let {
                ptr1_X5Vk [Dmd=<S,U>] :: GHC.Prim.Addr#
                [LclId, Str=DmdType]
                ptr1_X5Vk = GHC.Prim.byteArrayContents# ipv7_X5TO } in
              case GHC.Prim.writeWord64OffAddr#
                     @ GHC.Prim.RealWorld ptr1_X5Vk 0# ww_s6bq ipv6_X5TM
              of s1_a5SO [OS=OneShot] { __DEFAULT ->
              case {__pkg_ccall main hashword2 Addr#
                            -> Word#
                            -> Addr#
                            -> Addr#
                            -> State# RealWorld
                            -> (# State# RealWorld #)}_d5xn
                     ptr_a5Si 1## ptr1_X5Vk (GHC.Prim.plusAddr# ptr1_X5Vk 4#) s1_a5SO
              of _ [Occ=Dead] { (# ds_d5xl [OS=OneShot] #) ->
              case GHC.Prim.readWord64OffAddr#
                     @ GHC.Prim.RealWorld ptr1_X5Vk 0# ds_d5xl
              of _ [Occ=Dead] { (# ipv8_a5Ry, ipv9_a5Rz #) ->
              case GHC.Prim.touch#
                     @ 'GHC.Types.PtrRepUnlifted
                     @ GHC.Prim.ByteArray#
                     ipv7_X5TO
                     ipv8_a5Ry
              of s4_a5Sx [OS=OneShot] { __DEFAULT ->
              case GHC.Prim.touch#
                     @ 'GHC.Types.PtrRepUnlifted @ GHC.Prim.ByteArray# ipv3_a5Sk s4_a5Sx
              of s3_X5Us [OS=OneShot] { __DEFAULT ->
              (# s3_X5Us, GHC.Word.W64# ipv9_a5Rz #)
              }
              }
              }
              }
              }
              }
              }
              }
              }
              }
              })
    of _ [Occ=Dead] { (# ipv_a5Cc, ipv1_a5Cd #) ->
    ipv1_a5Cd
    }

-- RHS size: {terms: 11, types: 6, coercions: 0}
BloomFilter.Hash.$fHashableChar_$shashStorable [InlPrag=INLINE[0]]
  :: Word64 -> Char -> Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s6bm [Occ=Once!] :: Word64)
                 (w1_s6bn [Occ=Once!] :: Char) ->
                 case w_s6bm of _ [Occ=Dead] { GHC.Word.W64# ww1_s6bq [Occ=Once] ->
                 case w1_s6bn of _ [Occ=Dead] { GHC.Types.C# ww3_s6bu [Occ=Once] ->
                 BloomFilter.Hash.$w$shashStorable ww1_s6bq ww3_s6bu
                 }
                 }}]
BloomFilter.Hash.$fHashableChar_$shashStorable =
  \ (w_s6bm :: Word64) (w1_s6bn :: Char) ->
    case w_s6bm of _ [Occ=Dead] { GHC.Word.W64# ww1_s6bq ->
    case w1_s6bn of _ [Occ=Dead] { GHC.Types.C# ww3_s6bu ->
    BloomFilter.Hash.$w$shashStorable ww1_s6bq ww3_s6bu
    }
    }

-- RHS size: {terms: 83, types: 98, coercions: 0}
BloomFilter.Hash.$w$shashStorable2 [InlPrag=[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 138 0}]
BloomFilter.Hash.$w$shashStorable2 =
  \ (ww_s6bB :: GHC.Prim.Word#) (ww1_s6bF :: GHC.Prim.Int#) ->
    case GHC.Magic.runRW#
           @ 'GHC.Types.PtrRepLifted
           @ Word64
           (\ (s_a5C8 [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
              case GHC.Prim.noDuplicate# s_a5C8
              of s'_a5C9 [OS=OneShot] { __DEFAULT ->
              case GHC.Prim.newAlignedPinnedByteArray#
                     @ GHC.Prim.RealWorld 8# 8# s'_a5C9
              of _ [Occ=Dead] { (# ipv_a5Sd, ipv1_a5Se #) ->
              case GHC.Prim.unsafeFreezeByteArray#
                     @ GHC.Prim.RealWorld ipv1_a5Se ipv_a5Sd
              of _ [Occ=Dead] { (# ipv2_a5Sj, ipv3_a5Sk #) ->
              let {
                ptr_a5Si [Dmd=<S,U>] :: GHC.Prim.Addr#
                [LclId, Str=DmdType]
                ptr_a5Si = GHC.Prim.byteArrayContents# ipv3_a5Sk } in
              case GHC.Prim.writeIntOffAddr#
                     @ GHC.Prim.RealWorld ptr_a5Si 0# ww1_s6bF ipv2_a5Sj
              of s2_a5U3 [OS=OneShot] { __DEFAULT ->
              case GHC.Prim.newAlignedPinnedByteArray#
                     @ GHC.Prim.RealWorld 8# 8# s2_a5U3
              of _ [Occ=Dead] { (# ipv4_X5TD, ipv5_X5TF #) ->
              case GHC.Prim.unsafeFreezeByteArray#
                     @ GHC.Prim.RealWorld ipv5_X5TF ipv4_X5TD
              of _ [Occ=Dead] { (# ipv6_X5TN, ipv7_X5TP #) ->
              let {
                ptr1_X5Vm [Dmd=<S,U>] :: GHC.Prim.Addr#
                [LclId, Str=DmdType]
                ptr1_X5Vm = GHC.Prim.byteArrayContents# ipv7_X5TP } in
              case GHC.Prim.writeWord64OffAddr#
                     @ GHC.Prim.RealWorld ptr1_X5Vm 0# ww_s6bB ipv6_X5TN
              of s1_a5SO [OS=OneShot] { __DEFAULT ->
              case {__pkg_ccall main hashword2 Addr#
                            -> Word#
                            -> Addr#
                            -> Addr#
                            -> State# RealWorld
                            -> (# State# RealWorld #)}_d5xn
                     ptr_a5Si 2## ptr1_X5Vm (GHC.Prim.plusAddr# ptr1_X5Vm 4#) s1_a5SO
              of _ [Occ=Dead] { (# ds_d5xl [OS=OneShot] #) ->
              case GHC.Prim.readWord64OffAddr#
                     @ GHC.Prim.RealWorld ptr1_X5Vm 0# ds_d5xl
              of _ [Occ=Dead] { (# ipv8_a5Ry, ipv9_a5Rz #) ->
              case GHC.Prim.touch#
                     @ 'GHC.Types.PtrRepUnlifted
                     @ GHC.Prim.ByteArray#
                     ipv7_X5TP
                     ipv8_a5Ry
              of s4_a5Sx [OS=OneShot] { __DEFAULT ->
              case GHC.Prim.touch#
                     @ 'GHC.Types.PtrRepUnlifted @ GHC.Prim.ByteArray# ipv3_a5Sk s4_a5Sx
              of s3_X5Ut [OS=OneShot] { __DEFAULT ->
              (# s3_X5Ut, GHC.Word.W64# ipv9_a5Rz #)
              }
              }
              }
              }
              }
              }
              }
              }
              }
              }
              })
    of _ [Occ=Dead] { (# ipv_a5Cc, ipv1_a5Cd #) ->
    ipv1_a5Cd
    }

-- RHS size: {terms: 11, types: 6, coercions: 0}
BloomFilter.Hash.$fHashableInt_$shashStorable [InlPrag=INLINE[0]]
  :: Word64 -> Int -> Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s6bx [Occ=Once!] :: Word64)
                 (w1_s6by [Occ=Once!] :: Int) ->
                 case w_s6bx of _ [Occ=Dead] { GHC.Word.W64# ww1_s6bB [Occ=Once] ->
                 case w1_s6by of _ [Occ=Dead] { GHC.Types.I# ww3_s6bF [Occ=Once] ->
                 BloomFilter.Hash.$w$shashStorable2 ww1_s6bB ww3_s6bF
                 }
                 }}]
BloomFilter.Hash.$fHashableInt_$shashStorable =
  \ (w_s6bx :: Word64) (w1_s6by :: Int) ->
    case w_s6bx of _ [Occ=Dead] { GHC.Word.W64# ww1_s6bB ->
    case w1_s6by of _ [Occ=Dead] { GHC.Types.I# ww3_s6bF ->
    BloomFilter.Hash.$w$shashStorable2 ww1_s6bB ww3_s6bF
    }
    }

-- RHS size: {terms: 1, types: 0, coercions: 0}
BloomFilter.Hash.$fHashableDouble_$chashSalt
  :: Salt -> Double -> Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= BloomFilter.Hash.$fHashableDouble_$shashStorable}]
BloomFilter.Hash.$fHashableDouble_$chashSalt =
  BloomFilter.Hash.$fHashableDouble_$shashStorable

-- RHS size: {terms: 1, types: 0, coercions: 3}
BloomFilter.Hash.$fHashableDouble [InlPrag=INLINE (sat-args=0)]
  :: Hashable Double
[GblId[DFunId(nt)],
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=True)
         Tmpl= BloomFilter.Hash.$fHashableDouble_$chashSalt
               `cast` (Sym (BloomFilter.Hash.N:Hashable[0] <Double>_N)
                       :: ((Salt -> Double -> Word64) :: *)
                          ~R#
                          (Hashable Double :: Constraint))}]
BloomFilter.Hash.$fHashableDouble =
  BloomFilter.Hash.$fHashableDouble_$shashStorable
  `cast` (Sym (BloomFilter.Hash.N:Hashable[0] <Double>_N)
          :: ((Salt -> Double -> Word64) :: *)
             ~R#
             (Hashable Double :: Constraint))

-- RHS size: {terms: 1, types: 0, coercions: 0}
BloomFilter.Hash.$fHashableInt_$chashSalt :: Salt -> Int -> Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= BloomFilter.Hash.$fHashableInt_$shashStorable}]
BloomFilter.Hash.$fHashableInt_$chashSalt =
  BloomFilter.Hash.$fHashableInt_$shashStorable

-- RHS size: {terms: 1, types: 0, coercions: 3}
BloomFilter.Hash.$fHashableInt [InlPrag=INLINE (sat-args=0)]
  :: Hashable Int
[GblId[DFunId(nt)],
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=True)
         Tmpl= BloomFilter.Hash.$fHashableInt_$chashSalt
               `cast` (Sym (BloomFilter.Hash.N:Hashable[0] <Int>_N)
                       :: ((Salt -> Int -> Word64) :: *)
                          ~R#
                          (Hashable Int :: Constraint))}]
BloomFilter.Hash.$fHashableInt =
  BloomFilter.Hash.$fHashableInt_$shashStorable
  `cast` (Sym (BloomFilter.Hash.N:Hashable[0] <Int>_N)
          :: ((Salt -> Int -> Word64) :: *) ~R# (Hashable Int :: Constraint))

-- RHS size: {terms: 1, types: 0, coercions: 0}
BloomFilter.Hash.$fHashableChar_$chashSalt
  :: Salt -> Char -> Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= BloomFilter.Hash.$fHashableChar_$shashStorable}]
BloomFilter.Hash.$fHashableChar_$chashSalt =
  BloomFilter.Hash.$fHashableChar_$shashStorable

-- RHS size: {terms: 1, types: 0, coercions: 3}
BloomFilter.Hash.$fHashableChar [InlPrag=INLINE (sat-args=0)]
  :: Hashable Char
[GblId[DFunId(nt)],
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=True)
         Tmpl= BloomFilter.Hash.$fHashableChar_$chashSalt
               `cast` (Sym (BloomFilter.Hash.N:Hashable[0] <Char>_N)
                       :: ((Salt -> Char -> Word64) :: *)
                          ~R#
                          (Hashable Char :: Constraint))}]
BloomFilter.Hash.$fHashableChar =
  BloomFilter.Hash.$fHashableChar_$shashStorable
  `cast` (Sym (BloomFilter.Hash.N:Hashable[0] <Char>_N)
          :: ((Salt -> Char -> Word64) :: *)
             ~R#
             (Hashable Char :: Constraint))

-- RHS size: {terms: 2, types: 0, coercions: 0}
BloomFilter.Hash.$fHashable[]1 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
BloomFilter.Hash.$fHashable[]1 = GHC.Types.I# 0#

-- RHS size: {terms: 142, types: 138, coercions: 15}
BloomFilter.Hash.$fHashable[]_$chashSalt
  :: forall a_a5ux. Storable a_a5ux => Salt -> [a_a5ux] -> Word64
[GblId,
 Arity=3,
 Str=DmdType <L,U(C(U(U)),C(U(U)),A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 20 30] 476 0}]
BloomFilter.Hash.$fHashable[]_$chashSalt =
  \ (@ a_a5ux)
    ($dStorable_a5uy :: Storable a_a5ux)
    (salt_a4uF :: Salt)
    (xs_a4uG :: [a_a5ux]) ->
    case GHC.Magic.runRW#
           @ 'GHC.Types.PtrRepLifted
           @ Word64
           (\ (s_a5C8 [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
              case GHC.Prim.noDuplicate# s_a5C8
              of s'_a5C9 [OS=OneShot] { __DEFAULT ->
              let {
                sizex_s5MB [Dmd=<L,U(U)>] :: Int
                [LclId, Str=DmdType]
                sizex_s5MB =
                  case xs_a4uG of _ [Occ=Dead] {
                    [] -> BloomFilter.Hash.$fHashable[]1;
                    : ds1_a5Ud ds2_a5Ue -> sizeOf @ a_a5ux $dStorable_a5uy ds1_a5Ud
                  } } in
              let {
                len_a5Ck [Dmd=<L,U(U)>] :: Int
                [LclId, Str=DmdType]
                len_a5Ck =
                  case GHC.List.$wlenAcc @ a_a5ux xs_a4uG 0#
                  of ww2_a5Cm { __DEFAULT ->
                  GHC.Types.I# ww2_a5Cm
                  } } in
              ((Foreign.Marshal.Array.allocaArray
                  @ a_a5ux
                  @ Word64
                  $dStorable_a5uy
                  len_a5Ck
                  ((\ (ptr_a5Cq :: Ptr a_a5ux)
                      (eta_a5Cr [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case Foreign.Marshal.Array.newArray2
                             @ a_a5ux $dStorable_a5uy ptr_a5Cq xs_a4uG eta_a5Cr
                      of _ [Occ=Dead] { (# ipv_a5Cw, ipv1_a5Cx #) ->
                      case GHC.Prim.newAlignedPinnedByteArray#
                             @ GHC.Prim.RealWorld 8# 8# ipv_a5Cw
                      of _ [Occ=Dead] { (# ipv2_a5Sd, ipv3_a5Se #) ->
                      case GHC.Prim.unsafeFreezeByteArray#
                             @ GHC.Prim.RealWorld ipv3_a5Se ipv2_a5Sd
                      of _ [Occ=Dead] { (# ipv4_a5Sj, ipv5_a5Sk #) ->
                      case salt_a4uF of _ [Occ=Dead] { GHC.Word.W64# x_a5SM ->
                      let {
                        ptr1_a5Si [Dmd=<S,U>] :: GHC.Prim.Addr#
                        [LclId, Str=DmdType]
                        ptr1_a5Si = GHC.Prim.byteArrayContents# ipv5_a5Sk } in
                      case GHC.Prim.writeWord64OffAddr#
                             @ GHC.Prim.RealWorld ptr1_a5Si 0# x_a5SM ipv4_a5Sj
                      of s2_a5SO [OS=OneShot] { __DEFAULT ->
                      case len_a5Ck of _ [Occ=Dead] { GHC.Types.I# x1_a5KG ->
                      case sizex_s5MB of _ [Occ=Dead] { GHC.Types.I# y_a5KK ->
                      let {
                        x#_a5QJ [Dmd=<S,U>] :: GHC.Prim.Word#
                        [LclId, Str=DmdType]
                        x#_a5QJ = GHC.Prim.int2Word# (GHC.Prim.*# x1_a5KG y_a5KK) } in
                      case GHC.Prim.and# x#_a5QJ 3## of _ [Occ=Dead] {
                        __DEFAULT ->
                          case ptr_a5Cq of _ [Occ=Dead] { GHC.Ptr.Ptr ds4_d5wY ->
                          case {__pkg_ccall main hashlittle2 Addr#
                              -> Word#
                              -> Addr#
                              -> Addr#
                              -> State# RealWorld
                              -> (# State# RealWorld #)}_d5x7
                                 ds4_d5wY
                                 x#_a5QJ
                                 ptr1_a5Si
                                 (GHC.Prim.plusAddr# ptr1_a5Si 4#)
                                 s2_a5SO
                          of _ [Occ=Dead] { (# ds5_d5x5 [OS=OneShot] #) ->
                          case GHC.Prim.readWord64OffAddr#
                                 @ GHC.Prim.RealWorld ptr1_a5Si 0# ds5_d5x5
                          of _ [Occ=Dead] { (# ipv6_a5Ry, ipv7_a5Rz #) ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.PtrRepUnlifted
                                 @ GHC.Prim.ByteArray#
                                 ipv5_a5Sk
                                 ipv6_a5Ry
                          of s4_a5Sx [OS=OneShot] { __DEFAULT ->
                          (# s4_a5Sx, GHC.Word.W64# ipv7_a5Rz #)
                          }
                          }
                          }
                          };
                        0## ->
                          case ptr_a5Cq
                               `cast` ((Ptr U(phant:<*>_N, a_a5ux, Word32)_P)_R
                                       :: (Ptr a_a5ux :: *) ~R# (Ptr Word32 :: *))
                          of _ [Occ=Dead] { GHC.Ptr.Ptr ds4_d5xe ->
                          case {__pkg_ccall main hashword2 Addr#
                            -> Word#
                            -> Addr#
                            -> Addr#
                            -> State# RealWorld
                            -> (# State# RealWorld #)}_d5xn
                                 ds4_d5xe
                                 (GHC.Prim.quotWord# x#_a5QJ 4##)
                                 ptr1_a5Si
                                 (GHC.Prim.plusAddr# ptr1_a5Si 4#)
                                 s2_a5SO
                          of _ [Occ=Dead] { (# ds5_d5xl [OS=OneShot] #) ->
                          case GHC.Prim.readWord64OffAddr#
                                 @ GHC.Prim.RealWorld ptr1_a5Si 0# ds5_d5xl
                          of _ [Occ=Dead] { (# ipv6_a5Ry, ipv7_a5Rz #) ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.PtrRepUnlifted
                                 @ GHC.Prim.ByteArray#
                                 ipv5_a5Sk
                                 ipv6_a5Ry
                          of s4_a5Sx [OS=OneShot] { __DEFAULT ->
                          (# s4_a5Sx, GHC.Word.W64# ipv7_a5Rz #)
                          }
                          }
                          }
                          }
                      }
                      }
                      }
                      }
                      }
                      }
                      }
                      })
                   `cast` (<Ptr a_a5ux>_R -> Sym (GHC.Types.N:IO[0] <Word64>_R)
                           :: ((Ptr a_a5ux
                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld, Word64 #)) :: *)
                              ~R#
                              ((Ptr a_a5ux -> IO Word64) :: *))))
               `cast` (GHC.Types.N:IO[0] <Word64>_R
                       :: (IO Word64 :: *)
                          ~R#
                          ((GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld, Word64 #)) :: *)))
                s'_a5C9
              })
    of _ [Occ=Dead] { (# ipv_a5Cc, ipv1_a5Cd #) ->
    ipv1_a5Cd
    }

-- RHS size: {terms: 1, types: 0, coercions: 10}
BloomFilter.Hash.$fHashable[] [InlPrag=INLINE (sat-args=0)]
  :: forall a_a4BT. Storable a_a4BT => Hashable [a_a4BT]
[GblId[DFunId(nt)],
 Arity=3,
 Str=DmdType <L,U(C(U(U)),C(U(U)),A,C(C1(C1(C1(U(U,A))))),A,A,A,A)><L,U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= BloomFilter.Hash.$fHashable[]_$chashSalt
               `cast` (forall (a_a5ux :: <*>_N).
                       <Storable a_a5ux>_R
                       -> Sym (BloomFilter.Hash.N:Hashable[0] <[a_a5ux]>_N)
                       :: ((forall a_a5ux.
                            Storable a_a5ux =>
                            Salt -> [a_a5ux] -> Word64) :: *)
                          ~R#
                          ((forall a_a5ux. Storable a_a5ux => Hashable [a_a5ux]) :: *))}]
BloomFilter.Hash.$fHashable[] =
  BloomFilter.Hash.$fHashable[]_$chashSalt
  `cast` (forall (a_a5ux :: <*>_N).
          <Storable a_a5ux>_R
          -> Sym (BloomFilter.Hash.N:Hashable[0] <[a_a5ux]>_N)
          :: ((forall a_a5ux.
               Storable a_a5ux =>
               Salt -> [a_a5ux] -> Word64) :: *)
             ~R#
             ((forall a_a5ux. Storable a_a5ux => Hashable [a_a5ux]) :: *))

-- RHS size: {terms: 145, types: 138, coercions: 0}
BloomFilter.Hash.$whashByteString [InlPrag=[0]]
  :: Word64
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Word64 #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=DmdType <L,1*U(U)><S,U><L,U><S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 0 0 0 0 0] 232 60}]
BloomFilter.Hash.$whashByteString =
  \ (w_s6bM :: Word64)
    (ww_s6bR :: GHC.Prim.Addr#)
    (ww1_s6bS :: GHC.ForeignPtr.ForeignPtrContents)
    (ww2_s6bT :: GHC.Prim.Int#)
    (ww3_s6bU :: GHC.Prim.Int#)
    (w1_s6bO [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    case GHC.Prim.newPinnedByteArray#
           @ GHC.Prim.RealWorld (GHC.Prim.+# ww3_s6bU 1#) w1_s6bO
    of _ [Occ=Dead] { (# ipv_a657, ipv1_a658 #) ->
    case GHC.Prim.unsafeFreezeByteArray#
           @ GHC.Prim.RealWorld ipv1_a658 ipv_a657
    of _ [Occ=Dead] { (# ipv2_a65d, ipv3_a65e #) ->
    let {
      buf_a65c [Dmd=<S,U>] :: GHC.Prim.Addr#
      [LclId, Str=DmdType]
      buf_a65c = GHC.Prim.byteArrayContents# ipv3_a65e } in
    case {__pkg_ccall bytestring-0.10.8.1 memcpy Addr#
                                        -> Addr#
                                        -> Word#
                                        -> State# RealWorld
                                        -> (# State# RealWorld, Addr# #)}_a65g
           buf_a65c
           (GHC.Prim.plusAddr# ww_s6bR ww2_s6bT)
           (GHC.Prim.int2Word# ww3_s6bU)
           ipv2_a65d
    of _ [Occ=Dead] { (# ds4_a65j, ds5_a65k #) ->
    case GHC.Prim.writeWord8OffAddr#
           @ GHC.Prim.RealWorld
           (GHC.Prim.plusAddr# buf_a65c ww3_s6bU)
           0#
           0##
           ds4_a65j
    of s2_a65m [OS=OneShot] { __DEFAULT ->
    case GHC.Prim.newAlignedPinnedByteArray#
           @ GHC.Prim.RealWorld 8# 8# s2_a65m
    of _ [Occ=Dead] { (# ipv4_a5Sd, ipv5_a5Se #) ->
    case GHC.Prim.unsafeFreezeByteArray#
           @ GHC.Prim.RealWorld ipv5_a5Se ipv4_a5Sd
    of _ [Occ=Dead] { (# ipv6_a5Sj, ipv7_a5Sk #) ->
    case w_s6bM of _ [Occ=Dead] { GHC.Word.W64# x_a5SM ->
    let {
      ptr_a5Si [Dmd=<S,U>] :: GHC.Prim.Addr#
      [LclId, Str=DmdType]
      ptr_a5Si = GHC.Prim.byteArrayContents# ipv7_a5Sk } in
    case GHC.Prim.writeWord64OffAddr#
           @ GHC.Prim.RealWorld ptr_a5Si 0# x_a5SM ipv6_a5Sj
    of s1_a5SO [OS=OneShot] { __DEFAULT ->
    let {
      x#_a5QJ [Dmd=<S,U>] :: GHC.Prim.Word#
      [LclId, Str=DmdType]
      x#_a5QJ = GHC.Prim.int2Word# ww3_s6bU } in
    case GHC.Prim.and# x#_a5QJ 3## of _ [Occ=Dead] {
      __DEFAULT ->
        case {__pkg_ccall main hashlittle2 Addr#
                              -> Word#
                              -> Addr#
                              -> Addr#
                              -> State# RealWorld
                              -> (# State# RealWorld #)}_d5x7
               buf_a65c x#_a5QJ ptr_a5Si (GHC.Prim.plusAddr# ptr_a5Si 4#) s1_a5SO
        of _ [Occ=Dead] { (# ds_d5x5 [OS=OneShot] #) ->
        case GHC.Prim.readWord64OffAddr#
               @ GHC.Prim.RealWorld ptr_a5Si 0# ds_d5x5
        of _ [Occ=Dead] { (# ipv8_a5Ry, ipv9_a5Rz #) ->
        case GHC.Prim.touch#
               @ 'GHC.Types.PtrRepUnlifted
               @ GHC.Prim.ByteArray#
               ipv7_a5Sk
               ipv8_a5Ry
        of s4_a5Sx [OS=OneShot] { __DEFAULT ->
        case GHC.Prim.touch#
               @ 'GHC.Types.PtrRepLifted
               @ GHC.ForeignPtr.ForeignPtrContents
               ww1_s6bS
               s4_a5Sx
        of s'_a65s [OS=OneShot] { __DEFAULT ->
        case GHC.Prim.touch#
               @ 'GHC.Types.PtrRepUnlifted @ GHC.Prim.ByteArray# ipv3_a65e s'_a65s
        of s3_a65t [OS=OneShot] { __DEFAULT ->
        (# s3_a65t, GHC.Word.W64# ipv9_a5Rz #)
        }
        }
        }
        }
        };
      0## ->
        case {__pkg_ccall main hashword2 Addr#
                            -> Word#
                            -> Addr#
                            -> Addr#
                            -> State# RealWorld
                            -> (# State# RealWorld #)}_d5xn
               buf_a65c
               (GHC.Prim.quotWord# x#_a5QJ 4##)
               ptr_a5Si
               (GHC.Prim.plusAddr# ptr_a5Si 4#)
               s1_a5SO
        of _ [Occ=Dead] { (# ds_d5xl [OS=OneShot] #) ->
        case GHC.Prim.readWord64OffAddr#
               @ GHC.Prim.RealWorld ptr_a5Si 0# ds_d5xl
        of _ [Occ=Dead] { (# ipv8_a5Ry, ipv9_a5Rz #) ->
        case GHC.Prim.touch#
               @ 'GHC.Types.PtrRepUnlifted
               @ GHC.Prim.ByteArray#
               ipv7_a5Sk
               ipv8_a5Ry
        of s4_a5Sx [OS=OneShot] { __DEFAULT ->
        case GHC.Prim.touch#
               @ 'GHC.Types.PtrRepLifted
               @ GHC.ForeignPtr.ForeignPtrContents
               ww1_s6bS
               s4_a5Sx
        of s'_a65s [OS=OneShot] { __DEFAULT ->
        case GHC.Prim.touch#
               @ 'GHC.Types.PtrRepUnlifted @ GHC.Prim.ByteArray# ipv3_a65e s'_a65s
        of s3_a65t [OS=OneShot] { __DEFAULT ->
        (# s3_a65t, GHC.Word.W64# ipv9_a5Rz #)
        }
        }
        }
        }
        }
    }
    }
    }
    }
    }
    }
    }
    }
    }

-- RHS size: {terms: 13, types: 9, coercions: 0}
BloomFilter.Hash.$fHashableByteString1 [InlPrag=INLINE[0]]
  :: Word64
     -> Strict.ByteString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Word64 #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=DmdType <L,1*U(U)><S(SLSS),1*U(U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s6bM [Occ=Once] :: Word64)
                 (w1_s6bN [Occ=Once!] :: Strict.ByteString)
                 (w2_s6bO [Occ=Once, OS=OneShot]
                    :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1_s6bN
                 of _ [Occ=Dead]
                 { Data.ByteString.Internal.PS ww1_s6bR [Occ=Once]
                                               ww2_s6bS [Occ=Once] ww3_s6bT [Occ=Once]
                                               ww4_s6bU [Occ=Once] ->
                 BloomFilter.Hash.$whashByteString
                   w_s6bM ww1_s6bR ww2_s6bS ww3_s6bT ww4_s6bU w2_s6bO
                 }}]
BloomFilter.Hash.$fHashableByteString1 =
  \ (w_s6bM :: Word64)
    (w1_s6bN :: Strict.ByteString)
    (w2_s6bO [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    case w1_s6bN
    of _ [Occ=Dead]
    { Data.ByteString.Internal.PS ww1_s6bR ww2_s6bS ww3_s6bT
                                  ww4_s6bU ->
    BloomFilter.Hash.$whashByteString
      w_s6bM ww1_s6bR ww2_s6bS ww3_s6bT ww4_s6bU w2_s6bO
    }

Rec {
-- RHS size: {terms: 26, types: 29, coercions: 0}
BloomFilter.Hash.$fHashableByteString_go [Occ=LoopBreaker]
  :: [Strict.ByteString]
     -> Word64
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Word64 #)
[GblId, Arity=3, Caf=NoCafRefs, Str=DmdType <S,1*U><L,U(U)><S,U>]
BloomFilter.Hash.$fHashableByteString_go =
  \ (ds_a5VJ :: [Strict.ByteString])
    (eta1_a5VK :: Word64)
    (eta2_a5VL [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    case ds_a5VJ of _ [Occ=Dead] {
      [] -> (# eta2_a5VL, eta1_a5VK #);
      : y_a5VQ ys_a5VR ->
        case y_a5VQ
        of _ [Occ=Dead]
        { Data.ByteString.Internal.PS ww1_s6bR ww2_s6bS ww3_s6bT
                                      ww4_s6bU ->
        case BloomFilter.Hash.$whashByteString
               eta1_a5VK ww1_s6bR ww2_s6bS ww3_s6bT ww4_s6bU eta2_a5VL
        of _ [Occ=Dead] { (# ipv_a5VV, ipv1_a5VW #) ->
        BloomFilter.Hash.$fHashableByteString_go ys_a5VR ipv1_a5VW ipv_a5VV
        }
        }
    }
end Rec }

-- RHS size: {terms: 16, types: 17, coercions: 0}
BloomFilter.Hash.$fHashableByteString_$chashSalt
  :: Salt -> Lazy.ByteString -> Word64
[GblId,
 Arity=2,
 Str=DmdType <L,U(U)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 92 0}]
BloomFilter.Hash.$fHashableByteString_$chashSalt =
  \ (salt_a4uo :: Salt) (bs_a4up :: Lazy.ByteString) ->
    case GHC.Magic.runRW#
           @ 'GHC.Types.PtrRepLifted
           @ Word64
           (\ (s_a5C8 [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
              case GHC.Prim.noDuplicate# s_a5C8
              of s'_a5C9 [OS=OneShot] { __DEFAULT ->
              BloomFilter.Hash.$fHashableByteString_go
                (rechunk bs_a4up) salt_a4uo s'_a5C9
              })
    of _ [Occ=Dead] { (# ipv_a5Cc, ipv1_a5Cd #) ->
    ipv1_a5Cd
    }

-- RHS size: {terms: 1, types: 0, coercions: 3}
BloomFilter.Hash.$fHashableByteString [InlPrag=INLINE (sat-args=0)]
  :: Hashable Lazy.ByteString
[GblId[DFunId(nt)],
 Arity=2,
 Str=DmdType <L,U(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=True)
         Tmpl= BloomFilter.Hash.$fHashableByteString_$chashSalt
               `cast` (Sym (BloomFilter.Hash.N:Hashable[0] <Lazy.ByteString>_N)
                       :: ((Salt -> Lazy.ByteString -> Word64) :: *)
                          ~R#
                          (Hashable Lazy.ByteString :: Constraint))}]
BloomFilter.Hash.$fHashableByteString =
  BloomFilter.Hash.$fHashableByteString_$chashSalt
  `cast` (Sym (BloomFilter.Hash.N:Hashable[0] <Lazy.ByteString>_N)
          :: ((Salt -> Lazy.ByteString -> Word64) :: *)
             ~R#
             (Hashable Lazy.ByteString :: Constraint))

-- RHS size: {terms: 21, types: 22, coercions: 0}
BloomFilter.Hash.$fHashableByteString0_$chashSalt
  :: Salt -> Strict.ByteString -> Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <L,1*U(U)><S(SLSS),1*U(U,U,U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (salt_a4uq [Occ=Once] :: Salt)
                 (bs_a4ur [Occ=Once] :: Strict.ByteString) ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Word64
                        (\ (s_a5C8 [Occ=Once, OS=OneShot]
                              :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case GHC.Prim.noDuplicate# s_a5C8
                           of s'_a5C9 [OS=OneShot] { __DEFAULT ->
                           BloomFilter.Hash.$fHashableByteString1 salt_a4uq bs_a4ur s'_a5C9
                           })
                 of _ [Occ=Dead] { (# _ [Occ=Dead], ipv1_a5Cd [Occ=Once] #) ->
                 ipv1_a5Cd
                 }}]
BloomFilter.Hash.$fHashableByteString0_$chashSalt =
  \ (salt_a4uq :: Salt) (bs_a4ur :: Strict.ByteString) ->
    case GHC.Magic.runRW#
           @ 'GHC.Types.PtrRepLifted
           @ Word64
           (\ (s_a5C8 [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
              case GHC.Prim.noDuplicate# s_a5C8
              of s'_a5C9 [OS=OneShot] { __DEFAULT ->
              case bs_a4ur
              of _ [Occ=Dead]
              { Data.ByteString.Internal.PS ww1_s6bR ww2_s6bS ww3_s6bT
                                            ww4_s6bU ->
              BloomFilter.Hash.$whashByteString
                salt_a4uq ww1_s6bR ww2_s6bS ww3_s6bT ww4_s6bU s'_a5C9
              }
              })
    of _ [Occ=Dead] { (# ipv_a5Cc, ipv1_a5Cd #) ->
    ipv1_a5Cd
    }

-- RHS size: {terms: 1, types: 0, coercions: 3}
BloomFilter.Hash.$fHashableByteString0 [InlPrag=INLINE (sat-args=0)]
  :: Hashable Strict.ByteString
[GblId[DFunId(nt)],
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <L,1*U(U)><S(SLSS),1*U(U,U,U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=True)
         Tmpl= BloomFilter.Hash.$fHashableByteString0_$chashSalt
               `cast` (Sym (BloomFilter.Hash.N:Hashable[0] <Strict.ByteString>_N)
                       :: ((Salt -> Strict.ByteString -> Word64) :: *)
                          ~R#
                          (Hashable Strict.ByteString :: Constraint))}]
BloomFilter.Hash.$fHashableByteString0 =
  BloomFilter.Hash.$fHashableByteString0_$chashSalt
  `cast` (Sym (BloomFilter.Hash.N:Hashable[0] <Strict.ByteString>_N)
          :: ((Salt -> Strict.ByteString -> Word64) :: *)
             ~R#
             (Hashable Strict.ByteString :: Constraint))
